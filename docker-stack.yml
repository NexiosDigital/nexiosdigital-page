version: '3.8'

networks:
  proxy-swarm:
    external: true
    name: NexiosNet  # Usando sua rede swarm existente
  internal:
    driver: overlay

services:
  frontend:
    image: nexiosdigital_frontend:latest
    volumes:
      - frontend_build:/app/build
    networks:
      - internal
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    image: nexiosdigital_backend:latest
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - internal
      - proxy-swarm
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nexiosdigital-backend.rule=Host(`nexiosdigital.com`) && PathPrefix(`/api`)"
        - "traefik.http.services.nexiosdigital-backend.loadbalancer.server.port=8000"
        - "traefik.docker.network=NexiosNet"

  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - internal
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:alpine
    volumes:
      - frontend_build:/usr/share/nginx/html
      - ./nginx/custom.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal
      - proxy-swarm
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nexiosdigital-frontend.rule=Host(`nexiosdigital.com`)"
        - "traefik.http.services.nexiosdigital-frontend.loadbalancer.server.port=80"
        - "traefik.docker.network=NexiosNet"

volumes:
  mongo_data:
  frontend_build: