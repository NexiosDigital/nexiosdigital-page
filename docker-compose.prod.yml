version: '3.3'

networks:
  # Use a rede existente do proxy
  proxy:
    external: true
  # Rede interna para comunicação entre seus serviços
  internal:

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: always
    volumes:
      - frontend_build:/app/build
    networks:
      - internal

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - mongo
    networks:
      - internal
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-backend.loadbalancer.server.port=8000"

  mongo:
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - internal

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - frontend_build:/usr/share/nginx/html
      - ./nginx/custom.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
    networks:
      - internal
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-frontend.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-frontend.loadbalancer.server.port=80"

volumes:
  mongo_data:
  frontend_build: 